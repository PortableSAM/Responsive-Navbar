{"version":3,"sources":["components/navigation/images/keyboard_backspace-24px.svg","components/navigation/Navlinks.js","components/navigation/DesktopNavbar.js","components/navigation/MobileNavbar.js","components/navigation/Navbar.js","App.js","serviceWorker.js","index.js","theme.js"],"names":["module","exports","Navlinks","className","to","MyDesktopNavbar","styled","nav","props","theme","primary","accent","MyDesktopNavButton","button","displayMobileNavbar","DesktopNavbar","onClick","toggleMobileNavbar","src","mobileNavigation","alt","MyMobileNavbar","MobileNavbar","isMobileLink","MyNavbar","div","Navbar","state","componentDidMount","window","addEventListener","checkAndAutoHideMobileNavbar","componentWillUnmount","setState","prevState","screenWidth","innerWidth","this","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,qD,0MCyB5BC,EAtBE,WAChB,OACC,wBAAIC,UAAU,aACb,4BACC,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,QAAvB,SAID,4BACC,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,QAA5B,UAID,4BACC,kBAAC,IAAD,CAAMC,GAAG,WAAWD,UAAU,QAA9B,c,ghDCZJ,IAAME,EAAkBC,IAAOC,IAAV,KAMN,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,WAKV,SAAAF,GAAK,OAAIA,EAAMC,MAAME,UAIlB,SAAAH,GAAK,OAAIA,EAAMC,MAAME,UAuD5CC,EAAqBN,IAAOO,OAAV,KAQA,SAAAL,GAAK,OAAKA,EAAMM,oBAAsB,SAAW,UAsB1DC,EAZO,SAAAP,GACrB,OACC,kBAACH,EAAD,KACC,yBAAKF,UAAU,QAAf,QACA,kBAAC,EAAD,MACA,kBAACS,EAAD,CAAoBE,oBAAqBN,EAAMM,oBAAqBE,QAASR,EAAMS,oBAClF,yBAAKC,IAAKC,IAAkBC,IAAI,4C,6gBC/FpC,IAAMC,EAAiBf,IAAOC,IAAV,KAEL,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,WACN,SAAAF,GAAK,OAAIA,EAAMC,MAAME,UAM1B,SAAAH,GAAK,OAAKA,EAAMM,oBAAsB,IAAM,uBA4BtDQ,EARM,SAAAd,GACpB,OACC,kBAACa,EAAD,CAAgBP,oBAAqBN,EAAMM,qBAC1C,kBAAC,EAAD,CAAUS,cAAc,M,+KC/B3B,IAAMC,EAAWlB,IAAOmB,IAAV,KAkDCC,E,2MAzCdC,MAAQ,CACPb,qBAAqB,G,EAGtBc,kBAAoB,WACnBC,OAAOC,iBAAiB,SAAU,EAAKC,+B,EAGxCC,qBAAuB,WACtBH,OAAOC,iBAAiB,SAAU,EAAKC,+B,EAGxCd,mBAAqB,WACpB,EAAKgB,UAAS,SAAAC,GACb,MAAO,CAAEpB,qBAAsBoB,EAAUpB,yB,EAI3CiB,6BAA+B,WAC9B,IAAMI,EAAcN,OAAOO,WAEvB,EAAKT,MAAMb,qBAAuBqB,EAAc,KACnD,EAAKF,SAAS,CACbnB,qBAAqB,K,wEAMvB,OACC,kBAACU,EAAD,KACC,kBAAC,EAAD,CACCV,oBAAqBuB,KAAKV,MAAMb,oBAChCG,mBAAoBoB,KAAKpB,qBAE1B,kBAAC,EAAD,CAAcH,oBAAqBuB,KAAKV,MAAMb,2B,GApC7BwB,aCCNC,MARf,WACC,OACC,kBAAC,IAAD,KACC,kBAAC,EAAD,QCGiBC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACR,kBAAC,IAAD,CAAepC,MCVK,CACpBC,QAAS,UACTC,OAAQ,YDSP,kBAAC,EAAD,OAEDmC,SAASC,eAAe,SDoHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b733f857.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/keyboard_backspace-24px.3804992e.svg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navlinks = () => {\r\n\treturn (\r\n\t\t<ul className=\"nav-links\">\r\n\t\t\t<li>\r\n\t\t\t\t<Link to=\"/\" className=\"link\">\r\n\t\t\t\t\tHome\r\n\t\t\t\t</Link>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<Link to=\"/about\" className=\"link\">\r\n\t\t\t\t\tAbout\r\n\t\t\t\t</Link>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<Link to=\"/contact\" className=\"link\">\r\n\t\t\t\t\tContact\r\n\t\t\t\t</Link>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default Navlinks;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Navlinks from './Navlinks';\r\nimport mobileNavigation from '../../components/navigation/images/keyboard_backspace-24px.svg';\r\n\r\nconst MyDesktopNavbar = styled.nav`\r\n\tdisplay: flex;\r\n\tflex-flow: row nowrap;\r\n\tjustify-content: space-evenly;\r\n\talign-items: center;\r\n\r\n\tbackground: ${props => props.theme.primary};\r\n\tcolor: white;\r\n\r\n\theight: 15vh;\r\n\r\n\tbox-shadow: 0 10px 5px ${props => props.theme.accent};\r\n\r\n\t.logo {\r\n\t\tfont-size: 7vh;\r\n\t\ttext-shadow: 3px 3px 3px ${props => props.theme.accent};\r\n\t}\r\n\r\n\t.nav-links {\r\n\t\tdisplay: flex;\r\n\t\tflex-flow: row nowrap;\r\n\t\tjustify-content: space-evenly;\r\n\t\talign-items: center;\r\n\r\n\t\twidth: 35vw;\r\n\r\n\t\tlist-style: none;\r\n\r\n\t\t@media screen and (max-width: 768px) {\r\n\t\t\tdisplay: none;\r\n\t\t}\r\n\t}\r\n\r\n\t.link {\r\n\t\tdisplay: flex;\r\n\t\tflex-flow: column nowrap;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\r\n\t\theight: 15vh;\r\n\r\n\t\tcolor: white;\r\n\r\n\t\tpadding: 0 1rem;\r\n\r\n\t\tfont-size: 2.5vh;\r\n\t\ttext-decoration: none;\r\n\t\tborder-radius: 10px;\r\n\r\n\t\t&:focus {\r\n\t\t\tbackground: rgba(0, 0, 0, 0.1);\r\n\t\t\toutline: none;\r\n\t\t}\r\n\r\n\t\t&::after {\r\n\t\t\tcontent: '';\r\n\t\t\theight: 2px;\r\n\t\t\twidth: 0;\r\n\t\t\tbackground: white;\r\n\t\t\tdisplay: block;\r\n\t\t\ttransition: width 0.5s;\r\n\t\t}\r\n\r\n\t\t&:hover::after {\r\n\t\t\ttransform: width;\r\n\t\t\twidth: 125%;\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst MyDesktopNavButton = styled.button`\r\n\tbackground: transparent;\r\n\theight: 6vh;\r\n\twidth: 6vh;\r\n\tborder: none;\r\n    display: none;\r\n\r\n    transition: transform 1s;\r\n    transform: rotate(${props => (props.displayMobileNavbar ? '180deg' : '0deg')});\r\n    \r\n    &:focus{\r\n        outline: none;\r\n    }\r\n\r\n    @media screen and (max-width: 768px) {\r\n        display: block;\r\n`;\r\n\r\nconst DesktopNavbar = props => {\r\n\treturn (\r\n\t\t<MyDesktopNavbar>\r\n\t\t\t<div className=\"logo\">Logo</div>\r\n\t\t\t<Navlinks />\r\n\t\t\t<MyDesktopNavButton displayMobileNavbar={props.displayMobileNavbar} onClick={props.toggleMobileNavbar}>\r\n\t\t\t\t<img src={mobileNavigation} alt=\"You con't handle a moist towelette!!\" />\r\n\t\t\t</MyDesktopNavButton>\r\n\t\t</MyDesktopNavbar>\r\n\t);\r\n};\r\n\r\nexport default DesktopNavbar;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Navlinks from './Navlinks';\r\n\r\nconst MyMobileNavbar = styled.nav`\r\n\twidth: 50vw;\r\n\tbackground: ${props => props.theme.primary};\r\n\tbox-shadow: -10px 10px 5px ${props => props.theme.accent};\r\n\tmargin-bottom: 15px;\r\n\r\n\talign-self: flex-end;\r\n\r\n\ttransition: transform 1s;\r\n\ttransform: translateX(${props => (props.displayMobileNavbar ? '0' : 'calc(100% + 15px)')});\r\n\r\n\t.nav-links {\r\n\t\tdisplay: flex;\r\n\t\tflex-flow: column nowrap;\r\n\t\tjustify-content: space-evenly;\r\n\t\talign-items: center;\r\n\r\n\t\theight: 60vh;\r\n\r\n\t\tlist-style: none;\r\n\t}\r\n\r\n\t.link {\r\n\t\tcolor: white;\r\n\t\tfont-size: 2.5vh;\r\n\t\ttext-decoration: none;\r\n\t}\r\n`;\r\n\r\nconst MobileNavbar = props => {\r\n\treturn (\r\n\t\t<MyMobileNavbar displayMobileNavbar={props.displayMobileNavbar}>\r\n\t\t\t<Navlinks isMobileLink={true} />\r\n\t\t</MyMobileNavbar>\r\n\t);\r\n};\r\n\r\nexport default MobileNavbar;\r\n","import React, { Component } from 'react';\r\nimport DesktopNavbar from './DesktopNavbar';\r\nimport MobileNavbar from './MobileNavbar';\r\nimport styled from 'styled-components';\r\n\r\nconst MyNavbar = styled.div`\r\n\tdisplay: flex;\r\n\tflex-flow: column nowrap;\r\n\tjustify-content: flex-start;\r\n\r\n\toverflow-x: hidden;\r\n`;\r\n\r\nclass Navbar extends Component {\r\n\tstate = {\r\n\t\tdisplayMobileNavbar: false,\r\n\t};\r\n\r\n\tcomponentDidMount = () => {\r\n\t\twindow.addEventListener('resize', this.checkAndAutoHideMobileNavbar);\r\n\t};\r\n\r\n\tcomponentWillUnmount = () => {\r\n\t\twindow.addEventListener('resize', this.checkAndAutoHideMobileNavbar);\r\n\t};\r\n\r\n\ttoggleMobileNavbar = () => {\r\n\t\tthis.setState(prevState => {\r\n\t\t\treturn { displayMobileNavbar: !prevState.displayMobileNavbar };\r\n\t\t});\r\n\t};\r\n\r\n\tcheckAndAutoHideMobileNavbar = () => {\r\n\t\tconst screenWidth = window.innerWidth;\r\n\r\n\t\tif (this.state.displayMobileNavbar && screenWidth > 768) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplayMobileNavbar: false,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<MyNavbar>\r\n\t\t\t\t<DesktopNavbar\r\n\t\t\t\t\tdisplayMobileNavbar={this.state.displayMobileNavbar}\r\n\t\t\t\t\ttoggleMobileNavbar={this.toggleMobileNavbar}\r\n\t\t\t\t/>\r\n\t\t\t\t<MobileNavbar displayMobileNavbar={this.state.displayMobileNavbar} />\r\n\t\t\t</MyNavbar>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\n//import logo from './logo.svg';\n//import './App.css';\nimport Navbar from './components/navigation/Navbar';\nimport { BrowserRouter } from 'react-router-dom';\n\nfunction App() {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Navbar />\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from './theme';\n\nReactDOM.render(\n\t<ThemeProvider theme={theme}>\n\t\t<App />\n\t</ThemeProvider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\r\n\tprimary: '#2c3e50',\r\n\taccent: '#95a5a6',\r\n};\r\n"],"sourceRoot":""}